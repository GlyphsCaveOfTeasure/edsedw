local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local PlaceId = game.PlaceId

local MAX_DISTANCE = 250
local CharacterESP = {}
local foundBrainrots = {}
local brainrotNames = _G.TargetBrainrots or {}
local triedServers = {}
local serversTried = 0
local hasFound = false
local settingsFile = "brainrot_settings.json"
local running = true

local settings = {Ping = true, ESP = true}

-- Load/save settings
local function loadSettings()
    if isfile(settingsFile) then
        local success, result = pcall(HttpService.JSONDecode, HttpService, readfile(settingsFile))
        if success then settings = result end
    else
        writefile(settingsFile, HttpService:JSONEncode(settings))
    end
end

local function saveSettings()
    writefile(settingsFile, HttpService:JSONEncode(settings))
end

loadSettings()

-- GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false

local frame = Instance.new("Frame", ScreenGui)
frame.Size = UDim2.new(0, 403, 0, 415)
frame.Position = UDim2.new(0.429, 0, 0.276, 0)
frame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
frame.Active = true
frame.Draggable = true
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 10)

local Logger = Instance.new("ScrollingFrame", frame)
Logger.Size = UDim2.new(0, 403, 0, 305)
Logger.Position = UDim2.new(0, 0, 0.135, 0)
Logger.BackgroundTransparency = 1
Logger.ScrollBarThickness = 9
Logger.AutomaticCanvasSize = Enum.AutomaticSize.Y
local listLayout = Instance.new("UIListLayout", Logger)
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Padding = UDim.new(0, 5)
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

local scanningLabel = Instance.new("TextLabel", frame)
scanningLabel.Size = UDim2.new(0, 403, 0, 50)
scanningLabel.Position = UDim2.new(0, 0, 0.87, 0)
scanningLabel.BackgroundTransparency = 1
scanningLabel.Font = Enum.Font.FredokaOne
scanningLabel.Text = ""
scanningLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
scanningLabel.TextSize = 14

local FoundAmount = Instance.new("TextLabel", frame)
FoundAmount.Size = UDim2.new(0, 403, 0, 50)
FoundAmount.Font = Enum.Font.FredokaOne
FoundAmount.TextColor3 = Color3.fromRGB(255, 255, 255)
FoundAmount.TextSize = 30
FoundAmount.BackgroundTransparency = 1
FoundAmount.Text = "Found: 0"

local SettingsOpenButton = Instance.new("ImageButton", frame)
SettingsOpenButton.Size = UDim2.new(0, 50, 0, 50)
SettingsOpenButton.Position = UDim2.new(1.038, 0, 0, 0)
SettingsOpenButton.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
SettingsOpenButton.Image = "rbxassetid://100665044102453"
Instance.new("UICorner", SettingsOpenButton).CornerRadius = UDim.new(0, 10)

local SettingsGUI = Instance.new("Frame", frame)
SettingsGUI.Size = UDim2.new(0, 190, 0, 140)
SettingsGUI.Position = UDim2.new(12.0, 0, 0, 0)
SettingsGUI.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
Instance.new("UICorner", SettingsGUI).CornerRadius = UDim.new(0, 10)

-- Toggle helper
local function createToggle(parent, labelText, defaultState, yPosition, settingName)
    local Label = Instance.new("TextLabel", parent)
    Label.Size = UDim2.new(0, 98, 0, 50)
    Label.Position = UDim2.new(0, 10, 0, yPosition)
    Label.Font = Enum.Font.FredokaOne
    Label.Text = labelText
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 28
    Label.BackgroundTransparency = 1

    local Toggle = Instance.new("Frame", parent)
    Toggle.Size = UDim2.new(0, 70, 0, 34)
    Toggle.Position = UDim2.new(0.55, 0, 0, yPosition + 6)
    Toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    Instance.new("UICorner", Toggle).CornerRadius = UDim.new(0, 17)

    local Knob = Instance.new("Frame", Toggle)
    Knob.Size = UDim2.new(0, 26, 0, 26)
    Knob.Position = defaultState and UDim2.new(1, -30, 0, 4) or UDim2.new(0, 4, 0, 4)
    Knob.BackgroundColor3 = defaultState and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(35, 35, 35)
    Instance.new("UICorner", Knob).CornerRadius = UDim.new(1, 0)

    local function toggleAction()
        settings[settingName] = not settings[settingName]
        saveSettings()
        local on = settings[settingName]
        TweenService:Create(Knob, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Position = on and UDim2.new(1, -30, 0, 4) or UDim2.new(0, 4, 0, 4),
            BackgroundColor3 = on and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(35, 35, 35)
        }):Play()
    end

    Toggle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then toggleAction() end
    end)
    Knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then toggleAction() end
    end)
end

createToggle(SettingsGUI, "Ping:", settings.Ping, 10, "Ping")
createToggle(SettingsGUI, "ESP:", settings.ESP, 80, "ESP")

local settingsOpen = false
SettingsOpenButton.MouseButton1Click:Connect(function()
    settingsOpen = not settingsOpen
    TweenService:Create(SettingsGUI, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Position = settingsOpen and UDim2.new(1.03, 0, 0, 0) or UDim2.new(12.0, 0, 0, 0)}):Play()
end)

local pingSound = Instance.new("Sound")
pingSound.SoundId = (_G.PingSoundId or "rbxassetid://17208361335")
pingSound.Volume = 1
pingSound.Parent = Workspace

-- Cleans up all existing ESP
local function cleanupESP()
    for c, data in pairs(CharacterESP) do
        if data.conn then data.conn:Disconnect() end
        if data.highlight then data.highlight:Destroy() end
        if data.billboard then data.billboard:Destroy() end
    end
    CharacterESP = {}
end

-- Check if character is alive
local function isAlive(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    return humanoid and humanoid.Health > 0
end

-- Get the head of a character
local function getHead(character)
    return character:FindFirstChild("Head")
end

-- Distance from camera
local function distanceFromCamera(cf)
    return (Camera.CFrame.Position - cf.Position).Magnitude
end

-- Check if two players are on the same team
local function sameTeam(p1, p2)
    return p1.Team and p2.Team and p1.Team == p2.Team
end

-- Make a Highlight
local function makeHighlight(character, color)
    local h = Instance.new("Highlight")
    h.Adornee = character
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.FillTransparency = 0.15
    h.OutlineTransparency = 0.05
    h.OutlineColor = Color3.fromRGB(255, 255, 255)
    h.FillColor = color
    h.Parent = character
    return h
end

local function makeNameBillboard(head, text)
    local bb = Instance.new("BillboardGui")
    bb.Size = UDim2.new(0, 200, 0, 50)
    bb.AlwaysOnTop = true
    bb.StudsOffset = Vector3.new(0, 2.5, 0)
    bb.MaxDistance = MAX_DISTANCE + 25
    bb.Adornee = head
    bb.Parent = head

    local tl = Instance.new("TextLabel")
    tl.Size = UDim2.fromScale(1, 1)
    tl.BackgroundTransparency = 1
    tl.Text = text
    tl.TextSize = 22
    tl.Font = Enum.Font.GothamBold
    tl.TextColor3 = Color3.fromRGB(255, 50, 50) -- red for brainrots
    tl.TextStrokeTransparency = 0
    tl.TextStrokeColor3 = Color3.new(0, 0, 0) -- black outline
    tl.TextScaled = true
    tl.Parent = bb

    return bb
end


-- Enhanced ESP creation for both players and brainrots
local function createESP(part, owner)
    if not part or not part.Parent then return end
    if CharacterESP[part.Parent] then return end

    -- Determine color
    local color
    if owner.IsPlayer then
        color = sameTeam(LocalPlayer, owner.Player) and Color3.fromRGB(0, 255, 100) or Color3.fromRGB(0, 120, 255)
    else
        color = Color3.fromRGB(255, 0, 0)
    end

    local highlight = makeHighlight(part.Parent, color)
    local head = getHead(part.Parent)
    local billboard
    if head then
        billboard = makeNameBillboard(head, owner.Name)
    end

    local conn
    conn = RunService.RenderStepped:Connect(function()
        if not part.Parent or (part.Parent:FindFirstChildOfClass("Humanoid") and not isAlive(part.Parent)) then
            highlight.Enabled = false
            if billboard then billboard.Enabled = false end
            return
        end
        local d = distanceFromCamera(part.CFrame)
        local within = d <= MAX_DISTANCE
        highlight.Enabled = within
        if billboard then billboard.Enabled = within end

        if owner.IsPlayer then
            highlight.FillColor = sameTeam(LocalPlayer, owner.Player) and Color3.fromRGB(0, 255, 100) or Color3.fromRGB(0, 120, 255)
        else
            highlight.FillColor = Color3.fromRGB(255, 0, 0)
        end
    end)

    CharacterESP[part.Parent] = {highlight = highlight, billboard = billboard, conn = conn}
end

-- Brainrot detection
local function matchesBrainrot(name)
    for _, br in ipairs(brainrotNames) do
        if name:lower() == br:lower() then
            return br
        end
    end
    return nil
end

-- Scan function
local function scan()
    local foundBrainrotsLocal = {}
    local foundNamesLocal = {}
    cleanupESP()
    local hasFoundLocal = false

    -- Clear previous logs
    for _, child in ipairs(Logger:GetChildren()) do
        if child:IsA("TextLabel") then
            child:Destroy()
        end
    end

    -- Scan Workspace for brainrots
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if (obj:IsA("Model") or obj:IsA("Folder")) and not obj:IsDescendantOf(LocalPlayer.Character) then
            local match = matchesBrainrot(obj.Name)
            if match then
                foundBrainrotsLocal[match] = (foundBrainrotsLocal[match] or 0) + 1
                foundNamesLocal[match] = true

                -- ESP for brainrot
                if settings.ESP then
                    local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
                    if part then
                        createESP(part, {Name = match, IsPlayer = false})
                    end
                end

                -- Ping sound
                if settings.Ping then
                    pcall(function() pingSound:Play() end)
                end

                hasFoundLocal = true
            end
        end
    end

    -- Player ESP
    if settings.ESP then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local hrp = player.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    createESP(hrp, {Name = player.Name, IsPlayer = true, Player = player})
                    foundNamesLocal[player.Name] = true
                end
            end
        end
    end

    -- Update global variables
    foundBrainrots = foundBrainrotsLocal
    foundNames = foundNamesLocal
    hasFound = hasFoundLocal

    -- Update GUI with counts
    for name, count in pairs(foundBrainrotsLocal) do
        local logLabel = Instance.new("TextLabel")
        logLabel.Size = UDim2.new(1, 0, 0, 25)
        logLabel.BackgroundTransparency = 1
        logLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        logLabel.Text = name .. " (" .. count .. "x)"
        logLabel.Font = Enum.Font.GothamBold
        logLabel.TextSize = 18
        logLabel.Parent = Logger
    end

    -- Update scanning status
    scanningLabel.Text = hasFoundLocal and "✅ Found!" or "🔎 Scanning..."
    local totalFound = 0
    for _, v in pairs(foundBrainrots) do totalFound += v end
    FoundAmount.Text = "Found: " .. totalFound
end

local function tryServers()
    local req = (syn and syn.request) or request or http_request
    if not req then return end

    local function fetchServers(cursor)
        local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        if cursor then url = url .. "&cursor=" .. cursor end
        local success, result = pcall(function()
            return HttpService:JSONDecode(req({Url = url, Method = "GET"}).Body)
        end)
        return success and result or nil
    end

    local function hopLoop()
        local cursor = nil
        repeat
            local result = fetchServers(cursor)
            if not result then break end

            local serversChecked = 0
            for _, server in ipairs(result.data or {}) do
                if not running then return end
                if server.id ~= game.JobId and server.playing < server.maxPlayers and not triedServers[server.id] then
                    triedServers[server.id] = true
                    serversTried += 1
                    scanningLabel.Text = "🔁 Hopping... (" .. serversTried .. ")"

                    coroutine.wrap(function()
                        pcall(function()
                            TeleportService:TeleportToPlaceInstance(PlaceId, server.id, LocalPlayer)
                        end)
                    end)()

                    serversChecked += 1
                    if serversChecked >= 5 then
                        task.wait(1)
                        serversChecked = 0
                    end
                end
            end
            cursor = result.nextPageCursor
        until not cursor
    end

    hopLoop()
end

task.spawn(function()
    while true do
        if running then
            scan()
            local total = 0
            for _, c in pairs(foundBrainrots) do total += c end

            if total == 0 then
                hasFound = false
                scanningLabel.Text = "🔎 No brainrots found, hopping..."
                tryServers()
            else
                hasFound = true
                scanningLabel.Text = "✅ Found!"
            end
        end
        task.wait(1)
    end
end)
